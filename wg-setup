#!/bin/bash
# Interactively remove a peer from a WireGuard configuration
# This script is build for systemd-networkd's netdev-files,
# but should be easily convertible for wg-quick
#   created by Eicke Herbertz, 2020

# This will test the target .netdev file for existing values. For "Name" as first
# argument, the line "^# $2\$" is matched, otherwise "^$1 = $2\$" is matched.
# For exammple "test_exists AllowedIPs 127.0.0.1" matches "^AllowedIPs = 127.0.0.1$"

set -eu

test_exists() {
    key="$1 = "
    [[ "$1" == "Name" ]] && key="# "
    if grep -q "^${key}$2\$" "${WG_CONFFILE}"; then
        echo "A peer with this $1 already exists!"
        return 2
    fi
}

# A valid hostname contains only letters, numbers, dashes and underscores
test_name() {
    if [[ ! "$1" =~ ^[A-Za-z0-9_-]+$ ]]; then
        echo "Error: Not a valid hostname!"
        return 1
    fi
    test_exists "Name" "$1"
}

# AllowedIPs, at least in theory, can contain multiple addresses separated
# by a comma. Additionally, wg-setup supports defaulting to /32 suffix
test_allowedips() {
    if [[ ! "$1" =~ ^(([0-9]{1,3}\.){3}[0-9]{1,3}(/[0-9]{1,2})?,?)+$ ]]; then
        echo "Error: Invalid AllowedIPs (<addr>[/cidr][,<addr>[/cidr][,...]])"
        return 1
    fi
    test_exists "AllowedIPs" "$1"
}

# A WireGuard PublicKey consists of 43 random Base64 characters and a trailing '='
test_publickey() {
    if [[ ! "$1" =~ ^[A-Za-z0-9/+]{43}=$ ]]; then
        echo "Error: PublicKey invalid!"
        return 1
    fi
    test_exists "PublicKey" "$1"
}

# Inner function for cmd_add_peer
add_peer() {
    local name="$1"
    local peer="$2"
    local allowed_ips="$3"

    # Add CIDR /32 to ip addresses without suffix
    allowed_ips=$(echo "${allowed_ips}" | sed 's#\.\([0-9]\+\)\(,\|$\)#.\1/32\2#g')

    test_name "${name}" 1>&2 || return $?
    test_publickey "${peer}" 1>&2 || return $?
    test_allowedips "${allowed_ips}" 1>&2 || return $?

    local config
    config="[${IS_NETDEV:+WireGuard}Peer]\n"
    config+="# ${name}\n"
    config+="# Added by ${SUDO_USER:-$(id -un)} at $(date +%F)\n"
    config+="PublicKey = ${peer}\n"
    config+="AllowedIPs = ${allowed_ips}\n"

    echo -e "${config}"

    if [[ -z "${NO_CONFIRM}" ]]; then
        echo -n "Add this configuration to ${WG_CONFFILE}? [Y/n] "
        local add
        read -r add
        [[ -z "${add}" || "${add,}" == "y" ]] || return 1
    fi

    echo -e "${config}" >> "${WG_CONFFILE}"

    # Check if interface is non-zero and actually existing
    if [[ -z ${WG_TEST} && -e /sys/class/net/${WG_IFNAME} ]]; then
        wg set "${WG_IFNAME}" peer "${peer}" allowed-ips "${allowed_ips}"
    fi
    run_hooks added "$name" "$peer" "$allowed_ips"
}

# Inner function for cmd_remove_peer
remove_peer() {
    local peer="$1"
    local awkScript='{ l[++n]=$0 }
        /^(\[(WireGuard)?Peer\])?$/ {
            if ((f && !r) || (!f && r)) { for (i=1;i<n;i++) { print l[i] } if (n>1) { print "" } }
            delete l; n=(NF > 0); f=0; l[n]=$0
        }
        /^PublicKey/ { if($3==pk){ f=1; if(fs){m=1} fs=1 } }
        /^# / { if($2==pk) { f=1; if(fs){m=1} fs=1 } }
        /^AllowedIPs/ { if(index($3,pk)) { f=1; if(fs){m=1} fs=1 } }
        END { if(m){ exit 2 }else{ exit !fs } }'

    # Always print portion that is removed to stdout
    if awk -v pk="${peer}" "${awkScript}" "${WG_CONFFILE}"; then
        if [[ -z "${NO_CONFIRM}" ]]; then
            echo -n "Remove this configuration from ${WG_CONFFILE}? [y/N] "
            local del
            read -r del
            [[ "${del,}" == "y" ]] || return 1
        fi

        # Rerun the awk script to extract the peer data, we expect it to be a fine result now
        local name pubkey ips
        read name pubkey ips < <(awk -v pk="${peer}" "${awkScript}" "${WG_CONFFILE}" |
            awk '/^# /&&!n{n=$2}/^PublicKey/{k=$3}/^AllowedIPs/{i=$3}END{print n,k,i}')

        # Remove the entry from WG_CONFFILE and write the result to a temporary file
        local tmpfile
        tmpfile=$(mktemp "${WG_CONFFILE}.XXXXXX")
        awk -v pk="${peer}" -v r=1 "${awkScript}" "${WG_CONFFILE}" > "$tmpfile"

        # Copy ownership and permissions to the new file and then replace the original with it
        local fuid fgid perms
        read fuid fgid fperms < <(stat -c "%u %g %a" "$WG_CONFFILE")
        chmod "$fperms" "$tmpfile"
        chown "$fuid:$fgid" "$tmpfile"
        mv "$tmpfile" "$WG_CONFFILE"

        # Remove peer from interface if the interface actually is present
        if [[ -z ${WG_TEST} && -e /sys/class/net/${WG_IFNAME} ]]; then
            wg set "${WG_IFNAME}" peer "${pubkey}" remove
        fi
        run_hooks removed "$name" "$pubkey" "$ips"
        return 0
    elif [[ $? -eq 2 ]]; then
        echo "Multiple peers matching the search string found!" >&2
    else
        echo "No peer matching the search string was found!" >&2
    fi
    return 1
}

run_hooks() {
    [[ -d "${WG_SETUP_HOOK_DIR}" ]] || return 0
    local file
    for file in ${WG_SETUP_HOOK_DIR}/*; do
        [[ -x "${file}" ]] && "${file}" "$@"
    done
}

usage() {
    cat <<EOF
Usage: wg-setup [-y] [-f <file>|-i <ifname>] <command> [args...]
    -f <file>   systemd .netdev file to edit (incompatible with -i)
    -i <ifname> WireGuard interface to edit (incompatible with -f)
    -y          no confirmation required

Commands:
    Without arguments, all commands except for list-* run interactively.

    add-peer <name> <public-key> <allowed-ips>
        Add the provided configuration to WireGuard interface
    remove-peer <public-key|name|ip-address>
        Remove a peer from the WireGuard interface
    list-peers [format]
        List all valid wg-setup peers (those with a hostname) known to WireGuard.
        By default, a hosts-like list of addresses and hostnames is generated.
        Available formats are: $LIST_FORMATS
EOF
    exit $1
}

cmd_add_peer() {
    if [[ $# -ne 0 && $# -ne 3 ]]; then
        echo "Error: Expected 0 or 3 arguments, got $#!" >&2
        usage 1

    elif [[ $UID -ne 0 && ! ${WG_TEST} ]]; then
        echo "Error: Must be root to add new peers!" >&2
        return 1

    elif [[ $# -eq 3 ]]; then
        local name=$1
        local pubkey=$2
        local allowed_ips=$3
        add_peer "${name}" "${pubkey}" "${allowed_ips}"

    else
        echo "Add WireGuard peer(s) to ${WG_CONFFILE}"

        local cont="y"
        local name pubkey allowedips
        while [[ "${cont}" == "y" || "${cont}" == "Y" ]]; do
            echo -n "Name: "
            read -r name
            test_name "${name}" || continue

            echo -n "PublicKey: "
            read -r pubkey
            test_publickey "${pubkey}" || continue

            echo -n "AllowedIPs: "
            read -r allowedips
            test_allowedips "${allowedips}" || continue

            echo
            ! add_peer "${name}" "${pubkey}" "${allowedips}" 2>&1
            echo -n "Add another peer? [y/N] "
            read -r cont
        done
    fi
}

cmd_remove_peer() {
    if [[ $# -gt 1 ]]; then
        echo "Error: Expected 0 or 1 arguments, got $#!" >&2
        usage 1

    elif [[ $UID -ne 0 && ! ${WG_TEST} ]]; then
        echo "Error: Must be root to remove peers!" >&2
        return 1

    elif [[ $# -eq 1 ]]; then
        local peer=$1
        remove_peer "${peer}"

    else
        echo "Remove WireGuard peer(s) from ${WG_CONFFILE}"

        local cont="y"
        local peer
        while [[ "${cont}" == "y" || "${cont}" == "Y" ]]; do
            echo -n "Enter PublicKey/Hostname/IPAddress: "
            read -r peer
            ! remove_peer "${peer}" 2>&1
            echo -n "Remove another peer? [y/N] "
            read -r cont
        done
    fi
}

LIST_FORMATS="hosts, added, pubkeys, dns-zone"
cmd_list_peers() {
    if [[ $# -gt 1 ]]; then
        echo "Error: Too many arguments!" >&2
        usage 1
    fi

    local format=${1:-hosts}

    case "${format}" in
    hosts)
        awk '/^\[(WireGuard)?Peer\]$/{getline;if($1=="#"&&$2!="Added"){name=$2}else{name="<none>"}}
        /^AllowedIPs/{sub(/\/[0-9]+/,"",$3);printf("%-19s %s\n",$3,name)}' \
            ${WG_CONFFILE}
        ;;
    added)
        awk '/^\[(WireGuard)?Peer\]$/{getline;if($1=="#"){
            if($2!="Added"){name=$2;getline;if($1=="#"&&$2=="Added"){comment=$0}}
            else{name="<none>";comment=$0}}}
        /^AllowedIPs/{sub(/\/[0-9]+/,"",$3);printf("%-19s %-30s %s\n",$3,name,comment)}' \
            ${WG_CONFFILE}
        ;;
    pubkeys)
        awk '/^\[(WireGuard)?Peer\]$/{getline;if($1=="#"&&$2!="Added"){name=$2}else{name="<none>"}}
        /^PublicKey/{pubkey=$3}/^AllowedIPs/{sub(/\/[0-9]+/,"",$3);ip=$3}
        name&&pubkey&&ip{printf("%-19s %-30s %s\n",ip,name,pubkey);name=pubkey=ip=""}' \
            ${WG_CONFFILE}
        ;;
    dns-zone)
        awk '/^\[(WireGuard)?Peer\]$/{getline;if($1=="#"&&$2!="Added"){name=$2}else{name="<none>"}}
        /^AllowedIPs/{sub(/\/[0-9]+/,"",$3);printf("%-24s IN   A    %s\n",name,$3)}' \
            ${WG_CONFFILE}
        ;;
    *)
        echo "Available formats: $LIST_FORMATS"
        [[ "${format}" == "help" ]] || { echo "Error: Unknown format ${format}!"; return 1; }
        ;;
    esac
}

ifname_from_conffile() {
    local conffile="$1"
    if [[ ! -f "${conffile}" ]]; then
        echo "Error: ${conffile} not found!" >&2
        exit 1
    fi

    local ext basename ifname

    local ext="${conffile##*.}"

    if [[ "${ext}" == "conf" ]]; then
        # wg-quick uses <ifname>.conf as filename
        local basename="${conffile##*/}"
        ifname="${basename%.*}"
    elif [[ "${ext}" == "netdev" ]]; then
        # networkd has a Name field in the netdev file
        ifname=$(awk '/^Name/{gsub(/Name ?= ?/,"",$0);print}' "${conffile}")
    fi

    if [[ -z "${ifname}" && -z "${WG_TEST}" ]]; then
        echo "Error: Could not find interface from file ${conffile}!" >&2
        exit 1
    fi

    echo "${ifname}"
}

conffile_from_ifname() {
    local ifname=$1

    if [[ -n "${WG_TEST_FILE:-}" ]]; then
        # The cheap way: we are testing and the file is provided in WG_TEST_FILE
        echo "${WG_TEST_FILE}"

    else
        # wg-quick files are named after the interface they are for
        local wg_quick_file="/etc/wireguard/${ifname}.conf"

        # systemd-networkd files contain the interface name, so we grep and hope for a single result.
        local networkd_file="$(grep -lR "${ifname}" /etc/systemd/network/*.netdev 2>/dev/null || true)"

        if [[ -f "${wg_quick_file}" && -f "${networkd_file}" ]]; then
            # If both files exist, we check if systemd-networkd is enabled. In that case, we have
            # to assume that it's also responsible for the interface it has a configuration file for.
            # If it's not enabled, we assume we are using wg-quick.
            systemctl is-enabled systemd-networkd && echo "${networkd_file}" || echo "${wg_quick_file}"

        elif [[ -f "${wg_quick_file}" ]]; then
            echo "${wg_quick_file}"

        elif [[ -f "${networkd_file}" ]]; then
            echo "${networkd_file}"

        else
            echo "Could not find backing config file for ${ifname}! Do you have permissions to read it?" >&2
            exit 1
        fi
    fi
}

WG_SETUP_HOOK_DIR="${WG_SETUP_HOOK_DIR:-/etc/wg-setup}"

# use enhanced getopt
OPTS=f:hi:y
LOPTS=file:,help,ifname:,noconfirm
PARSED_OPTS=$(getopt -o $OPTS -l $LOPTS -n "$0" -- "$@")
eval set -- "$PARSED_OPTS"

WG_CONFFILE=
WG_IFNAME=
NO_CONFIRM=
WG_TEST=${WG_TEST:-}

while [[ "$1" != "--" ]]; do
    case $1 in
    -f|--file)
        WG_CONFFILE="$2"
        shift 2
        ;;
    -h|--help)
        usage
        ;;
    -i|--ifname)
        WG_IFNAME="$2"
        shift 2
        ;;
    -y|--noconfirm)
        NO_CONFIRM=yes
        shift
        ;;
    *)
        echo "Programming error" >&2
        exit 1
        ;;
    esac
done
shift # away the --

IS_NETDEV=

# With an interface, wg-setup will automatically find the target
# configuration file and won't accept any -f argument
if [[ -n "${WG_IFNAME}" && -n "${WG_CONFFILE}" ]]; then
    echo "Error: Can't use -i and -f together!" >&2
    exit 1

elif [[ -n "${WG_CONFFILE}" ]]; then
    # If an existing file is provided, use it and determine interface name
    WG_IFNAME=$(ifname_from_conffile "${WG_CONFFILE}")
    echo "Using interface name ${WG_IFNAME}"

else
    # No configuration file is provided, try to figure it out.
    # Use wg0 if no interface name is provided, either.
    WG_IFNAME=${WG_IFNAME:-wg0}

    WG_CONFFILE="$(conffile_from_ifname "${WG_IFNAME}")"
fi

[[ "${WG_CONFFILE##*.}" == "netdev" ]] && IS_NETDEV=yes

cmd="$1"; shift || usage 1

case "${cmd}" in
    add-peer|a*)
        cmd_add_peer "$@"
        ;;
    remove-peer|r|rm|rmp*|rem*)
        cmd_remove_peer "$@"
        ;;
    list-peers|ls|lsp*|lp|list-p*)
        cmd_list_peers "$@"
        ;;
    help|h*)
        usage 0
        ;;
    *)
        echo "Unknown command ${cmd}!" >&2
        usage 1
        ;;
esac

